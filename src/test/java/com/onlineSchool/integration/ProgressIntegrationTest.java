package com.onlineSchool.integration;

import com.onlineSchool.BaseIntegrationTest;
import com.onlineSchool.config.TestSecurityConfig;
import com.onlineSchool.model.*;
import com.onlineSchool.service.ProgressService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.context.annotation.Import;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import java.time.LocalDateTime;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@AutoConfigureMockMvc
@Import(TestSecurityConfig.class)
public class ProgressIntegrationTest extends BaseIntegrationTest {

    @Autowired
    private MockMvc mockMvc;
    
    @Autowired
    private ProgressService progressService;

    @Test
    @WithMockUser(username = "teststudent", roles = {"STUDENT"})
    public void testStudentProgressPage_ShouldWork() throws Exception {
        // üìä –°–ü–ê–°–ê–ï–ú –ö–û–¢–ï–ù–ö–ê: –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        System.out.println("üìä –¢–ï–°–¢ –ü–†–û–ì–†–ï–°–°–ê: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–ø–∞—Å–µ–Ω–∏–µ –∫–æ—Ç–µ–Ω–∫–∞!");
        
        // Arrange
        User teacher = createTestTeacher();
        User student = new User();
        student.setUsername("teststudent");
        student.setEmail("teststudent@test.com");
        student.setPassword("password");
        student.setRole(Role.STUDENT);
        student.setActive(true);
        student = userService.save(student);
        
        Course course = createTestCourse(teacher);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –∫—É—Ä—Å
        courseService.enrollStudent(course.getId(), student);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ–±–∏–Ω–∞—Ä–æ–≤
        Webinar pastWebinar = createTestWebinar(course);
        pastWebinar.setStartTime(LocalDateTime.now().minusDays(1)); // –ü—Ä–æ—à–µ–¥—à–∏–π
        pastWebinar = webinarService.save(pastWebinar);
        
        Webinar futureWebinar = createTestWebinar(course);
        futureWebinar.setStartTime(LocalDateTime.now().plusDays(1)); // –ë—É–¥—É—â–∏–π
        futureWebinar = webinarService.save(futureWebinar);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ–±–æ–∏—Ö –≤–µ–±–∏–Ω–∞—Ä–æ–≤
        webinarService.addParticipant(pastWebinar.getId(), student);
        webinarService.addParticipant(futureWebinar.getId(), student);
        
        System.out.println("‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è —Å –∫—É—Ä—Å–æ–º –∏ –≤–µ–±–∏–Ω–∞—Ä–∞–º–∏");
        
        // Act & Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        mockMvc.perform(get("/student/progress"))
                .andExpect(status().isOk())
                .andExpect(view().name("student/progress"))
                .andExpect(model().attributeExists("student"))
                .andExpect(model().attributeExists("enrolledCourses"))
                .andExpect(model().attributeExists("courseProgressMap"))
                .andExpect(model().attributeExists("totalCourses"))
                .andExpect(model().attributeExists("completedWebinars"))
                .andExpect(model().attributeExists("overallProgress"));
        
        System.out.println("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        int courseProgress = progressService.calculateCourseProgress(course, student);
        assertThat(courseProgress).isEqualTo(50); // 1 –∏–∑ 2 –≤–µ–±–∏–Ω–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω
        
        Map<String, Object> stats = progressService.getProgressStatistics(student);
        assertThat(stats.get("totalCourses")).isEqualTo(1);
        assertThat(stats.get("completedWebinars")).isEqualTo(1L); // –¢–æ–ª—å–∫–æ –ø—Ä–æ—à–µ–¥—à–∏–π –≤–µ–±–∏–Ω–∞—Ä
        assertThat(stats.get("totalAttendedWebinars")).isEqualTo(2); // –í—Å–µ–≥–æ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ 2
        
        System.out.println("‚úÖ –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
        System.out.println("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∫—É—Ä—Å–∞: " + courseProgress + "%");
        System.out.println("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: " + stats);
        
        System.out.println("üê± –ö–û–¢–ï–ù–û–ö –ü–û–õ–ù–û–°–¢–¨–Æ –°–ü–ê–°–ï–ù! –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!");
    }
    
    @Test
    @WithMockUser(username = "teststudent", roles = {"STUDENT"})
    public void testStudentDashboard_ShouldShowProgress() throws Exception {
        // Arrange
        User teacher = createTestTeacher();
        User student = new User();
        student.setUsername("teststudent");
        student.setEmail("teststudent@test.com");
        student.setPassword("password");
        student.setRole(Role.STUDENT);
        student.setActive(true);
        student = userService.save(student);
        
        Course course = createTestCourse(teacher);
        courseService.enrollStudent(course.getId(), student);
        
        // Act & Assert
        mockMvc.perform(get("/student/dashboard"))
                .andExpect(status().isOk())
                .andExpect(view().name("student/dashboard"))
                .andExpect(model().attributeExists("student"))
                .andExpect(model().attributeExists("enrolledCourses"))
                .andExpect(model().attributeExists("courseProgressMap"))
                .andExpect(model().attributeExists("coursesCount"))
                .andExpect(model().attributeExists("overallProgress"));
        
        System.out.println("‚úÖ Dashboard —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
    }
    
    @Test
    public void testProgressService_CalculatesCorrectly() {
        // Arrange
        User teacher = createTestTeacher();
        User student = createTestUser();
        Course course = createTestCourse(teacher);
        
        // –°–æ–∑–¥–∞–µ–º 4 –≤–µ–±–∏–Ω–∞—Ä–∞
        Webinar webinar1 = createTestWebinar(course);
        webinar1.setStartTime(LocalDateTime.now().minusDays(3));
        webinar1 = webinarService.save(webinar1);
        
        Webinar webinar2 = createTestWebinar(course);
        webinar2.setStartTime(LocalDateTime.now().minusDays(2));
        webinar2 = webinarService.save(webinar2);
        
        Webinar webinar3 = createTestWebinar(course);
        webinar3.setStartTime(LocalDateTime.now().minusDays(1));
        webinar3 = webinarService.save(webinar3);
        
        Webinar webinar4 = createTestWebinar(course);
        webinar4.setStartTime(LocalDateTime.now().plusDays(1)); // –ë—É–¥—É—â–∏–π
        webinar4 = webinarService.save(webinar4);
        
        // –°—Ç—É–¥–µ–Ω—Ç —É—á–∞—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Å–µ—Ö –≤–µ–±–∏–Ω–∞—Ä–∞—Ö
        webinarService.addParticipant(webinar1.getId(), student);
        webinarService.addParticipant(webinar2.getId(), student);
        webinarService.addParticipant(webinar3.getId(), student);
        webinarService.addParticipant(webinar4.getId(), student);
        
        // Act
        int progress = progressService.calculateCourseProgress(course, student);
        
        // Assert
        assertThat(progress).isEqualTo(75); // 3 –∏–∑ 4 –≤–µ–±–∏–Ω–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        
        System.out.println("‚úÖ ProgressService —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: " + progress + "%");
    }
    
    @Test
    public void testProgressService_HandlesEmptyCourse() {
        // Arrange
        User teacher = createTestTeacher();
        User student = createTestUser();
        Course emptyCourse = createTestCourse(teacher);
        
        // Act
        int progress = progressService.calculateCourseProgress(emptyCourse, student);
        Map<String, Object> stats = progressService.getProgressStatistics(student);
        
        // Assert
        assertThat(progress).isEqualTo(0);
        assertThat(stats.get("totalCourses")).isEqualTo(0); // –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –∫—É—Ä—Å
        
        System.out.println("‚úÖ ProgressService –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–µ –∫—É—Ä—Å—ã!");
    }
} 