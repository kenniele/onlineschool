package com.onlineSchool.integration;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.onlineSchool.BaseIntegrationTest;
import com.onlineSchool.config.TestSecurityConfig;
import com.onlineSchool.model.*;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@AutoConfigureMockMvc
@Import(TestSecurityConfig.class)
public class CommentIntegrationTest extends BaseIntegrationTest {

    @Autowired
    private MockMvc mockMvc;
    
    @Autowired
    private ObjectMapper objectMapper;

    @Test
    @WithMockUser(username = "testuser", roles = {"STUDENT"})
    public void testCreateComment_ShouldWorkCorrectly() throws Exception {
        // üí¨ –°–ü–ê–°–ê–ï–ú –ö–û–¢–ï–ù–ö–ê: –¢–µ—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        System.out.println("üí¨ –¢–ï–°–¢ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ø–∞—Å–µ–Ω–∏–µ –∫–æ—Ç–µ–Ω–∫–∞!");
        
        // Arrange
        User teacher = createTestTeacher();
        Course course = createTestCourse(teacher);
        Webinar webinar = createTestWebinar(course);
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
        User testUser = new User();
        testUser.setUsername("testuser");
        testUser.setEmail("testuser@test.com");
        testUser.setPassword("password");
        testUser.setRole(Role.STUDENT);
        testUser.setActive(true);
        testUser = userService.save(testUser);
        
        System.out.println("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≤–µ–±–∏–Ω–∞—Ä ID: " + webinar.getId());
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        Map<String, Object> commentData = new HashMap<>();
        commentData.put("content", "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Å–ø–∞—Å–µ–Ω–∏—è –∫–æ—Ç–µ–Ω–∫–∞!");
        commentData.put("entityType", "WEBINAR");
        commentData.put("entityId", webinar.getId());
        
        String commentJson = objectMapper.writeValueAsString(commentData);
        System.out.println("üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + commentJson);
        
        // Act & Assert: –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        mockMvc.perform(post("/api/comments")
                .contentType(MediaType.APPLICATION_JSON)
                .content(commentJson))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.content").value("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Å–ø–∞—Å–µ–Ω–∏—è –∫–æ—Ç–µ–Ω–∫–∞!"))
                .andExpect(jsonPath("$.entityType").value("WEBINAR"))
                .andExpect(jsonPath("$.entityId").value(webinar.getId().intValue()))
                .andExpect(jsonPath("$.user.username").value("testuser"));
        
        System.out.println("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ –ë–î
        List<Comment> comments = commentService.getCommentsByEntity(EntityType.WEBINAR, webinar.getId());
        assertThat(comments).hasSize(1);
        assertThat(comments.get(0).getContent()).isEqualTo("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Å–ø–∞—Å–µ–Ω–∏—è –∫–æ—Ç–µ–Ω–∫–∞!");
        assertThat(comments.get(0).getUser().getUsername()).isEqualTo("testuser");
        
        System.out.println("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!");
        System.out.println("üê± –ö–û–¢–ï–ù–û–ö –ü–û–ß–¢–ò –°–ü–ê–°–ï–ù! –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!");
    }
    
    @Test
    @WithMockUser(username = "testuser", roles = {"STUDENT"})
    public void testGetCommentsByWebinar_ShouldReturnComments() throws Exception {
        // Arrange
        User teacher = createTestTeacher();
        Course course = createTestCourse(teacher);
        Webinar webinar = createTestWebinar(course);
        
        User testUser = new User();
        testUser.setUsername("testuser");
        testUser.setEmail("testuser@test.com");
        testUser.setPassword("password");
        testUser.setRole(Role.STUDENT);
        testUser.setActive(true);
        testUser = userService.save(testUser);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        Comment comment = createTestComment(testUser, webinar);
        
        // Act & Assert
        mockMvc.perform(get("/api/comments/webinar/" + webinar.getId()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$[0].content").value(comment.getContent()))
                .andExpect(jsonPath("$[0].user.username").value("testuser"));
        
        System.out.println("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
    }
    
    @Test
    public void testCreateCommentWithoutAuth_ShouldReturn403() throws Exception {
        // Arrange
        User teacher = createTestTeacher();
        Course course = createTestCourse(teacher);
        Webinar webinar = createTestWebinar(course);
        
        Map<String, Object> commentData = new HashMap<>();
        commentData.put("content", "Test comment");
        commentData.put("entityType", "WEBINAR");
        commentData.put("entityId", webinar.getId());
        
        String commentJson = objectMapper.writeValueAsString(commentData);
        
        // Act & Assert
        mockMvc.perform(post("/api/comments")
                .contentType(MediaType.APPLICATION_JSON)
                .content(commentJson))
                .andExpect(status().isForbidden());
    }
    
    @Test
    @WithMockUser(username = "testuser", roles = {"STUDENT"})
    public void testCreateCommentWithInvalidData_ShouldHandleError() throws Exception {
        // Arrange
        Map<String, Object> invalidCommentData = new HashMap<>();
        invalidCommentData.put("content", "");  // –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        invalidCommentData.put("entityType", "WEBINAR");
        // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç entityId
        
        String commentJson = objectMapper.writeValueAsString(invalidCommentData);
        
        // Act & Assert
        mockMvc.perform(post("/api/comments")
                .contentType(MediaType.APPLICATION_JSON)
                .content(commentJson))
                .andExpect(status().is4xxClientError());
        
        System.out.println("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!");
    }
} 